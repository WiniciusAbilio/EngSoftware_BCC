{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\html e css\\\\react\\\\Engsoftware\\\\EngSoftware_BCC\\\\src\\\\components\\\\dragDropFilesV2.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// ... (your imports)\n\nconst DragDropFilesV2 = () => {\n  _s();\n  const [files, setFiles] = useState(null);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [showPopup, setShowPopup] = useState(false);\n  const inputRef = useRef();\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    setFiles(event.dataTransfer.files);\n    setSelectedFiles(Array.from(event.dataTransfer.files));\n  };\n  const getFiles = () => selectedFiles;\n\n  // send files to the server\n  const handleUpload = () => {\n    const formData = new FormData();\n    const filesToUpload = getFiles();\n    filesToUpload.forEach((file, index) => {\n      formData.append(`file${index + 1}`, file);\n    });\n\n    // Uncomment the fetch block when you have the server endpoint\n    /*\r\n    fetch(\"link\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Upload successful\", data);\r\n        setShowPopup(true);\r\n        setFiles(null);\r\n        setSelectedFiles([]);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error uploading files:\", error);\r\n      });\r\n    */\n  };\n\n  const closePopup = () => {\n    setShowPopup(false);\n  };\n  const handleInserir = () => {\n    // This is where you use getFiles\n    const filesToInsert = getFiles();\n    console.log(\"Files to insert:\", filesToInsert);\n    // The rest of your logic for inserting files\n  };\n\n  if (files) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploads\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Array.from(files).map((file, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: file.name\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setFiles(null),\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUpload,\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleInserir,\n          children: \"Inserir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Imagens inseridas com sucesso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closePopup,\n          children: \"Fechar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropzone\",\n      onDragOver: handleDragOver,\n      onDrop: handleDrop,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Arraste as imagens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ou\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: event => {\n          setFiles(event.target.files);\n          setSelectedFiles(Array.from(event.target.files));\n        },\n        hidden: true,\n        accept: \"image/png, image/jpeg\",\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => inputRef.current.click(),\n        children: \"Selecione as imagens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(DragDropFilesV2, \"wFk22hRSmBU8M0bMGu7d3yS1LdY=\");\n_c = DragDropFilesV2;\nexport default DragDropFilesV2;\nvar _c;\n$RefreshReg$(_c, \"DragDropFilesV2\");","map":{"version":3,"names":["DragDropFilesV2","_s","files","setFiles","useState","selectedFiles","setSelectedFiles","showPopup","setShowPopup","inputRef","useRef","handleDragOver","event","preventDefault","handleDrop","dataTransfer","Array","from","getFiles","handleUpload","formData","FormData","filesToUpload","forEach","file","index","append","closePopup","handleInserir","filesToInsert","console","log","_jsxDEV","className","children","map","idx","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_Fragment","onDragOver","onDrop","type","multiple","onChange","target","hidden","accept","ref","current","click","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/html e css/react/Engsoftware/EngSoftware_BCC/src/components/dragDropFilesV2.js"],"sourcesContent":["// ... (your imports)\r\n\r\nconst DragDropFilesV2 = () => {\r\n    const [files, setFiles] = useState(null);\r\n    const [selectedFiles, setSelectedFiles] = useState([]);\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const inputRef = useRef();\r\n  \r\n    const handleDragOver = (event) => {\r\n      event.preventDefault();\r\n    };\r\n  \r\n    const handleDrop = (event) => {\r\n      event.preventDefault();\r\n      setFiles(event.dataTransfer.files);\r\n      setSelectedFiles(Array.from(event.dataTransfer.files));\r\n    };\r\n  \r\n    const getFiles = () => selectedFiles;\r\n  \r\n    // send files to the server\r\n    const handleUpload = () => {\r\n      const formData = new FormData();\r\n      const filesToUpload = getFiles();\r\n      filesToUpload.forEach((file, index) => {\r\n        formData.append(`file${index + 1}`, file);\r\n      });\r\n  \r\n      // Uncomment the fetch block when you have the server endpoint\r\n      /*\r\n      fetch(\"link\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(\"Upload successful\", data);\r\n          setShowPopup(true);\r\n          setFiles(null);\r\n          setSelectedFiles([]);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error uploading files:\", error);\r\n        });\r\n      */\r\n    };\r\n  \r\n    const closePopup = () => {\r\n      setShowPopup(false);\r\n    };\r\n  \r\n    const handleInserir = () => {\r\n      // This is where you use getFiles\r\n      const filesToInsert = getFiles();\r\n      console.log(\"Files to insert:\", filesToInsert);\r\n      // The rest of your logic for inserting files\r\n    };\r\n  \r\n    if (files) {\r\n      return (\r\n        <div className=\"uploads\">\r\n          <ul>\r\n            {Array.from(files).map((file, idx) => (\r\n              <li key={idx}>{file.name}</li>\r\n            ))}\r\n          </ul>\r\n          <div className=\"actions\">\r\n            <button onClick={() => setFiles(null)}>Cancelar</button>\r\n            <button onClick={handleUpload}>Upload</button>\r\n            <button onClick={handleInserir}>Inserir</button>\r\n          </div>\r\n          {showPopup && (\r\n            <div className=\"popup\">\r\n              <p>Imagens inseridas com sucesso</p>\r\n              <button onClick={closePopup}>Fechar</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    return (\r\n      <>\r\n        <div className=\"dropzone\" onDragOver={handleDragOver} onDrop={handleDrop}>\r\n          <h1>Arraste as imagens</h1>\r\n          <h1>Ou</h1>\r\n          <input\r\n            type=\"file\"\r\n            multiple\r\n            onChange={(event) => {\r\n              setFiles(event.target.files);\r\n              setSelectedFiles(Array.from(event.target.files));\r\n            }}\r\n            hidden\r\n            accept=\"image/png, image/jpeg\"\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={() => inputRef.current.click()}>Selecione as imagens</button>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  export default DragDropFilesV2;\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}